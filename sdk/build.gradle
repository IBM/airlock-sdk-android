apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    SNAPSHOT = true
    BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: devBuildNumber
    VERSION_MICRO_BUILD_NUMBER = project.hasProperty("releaseMicroBuildNumber") ? releaseMicroBuildNumber : 0

    REPO_URL = SNAPSHOT ? "https://oss.sonatype.org/content/repositories/snapshots" :
            "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    VERSION_MAJOR_SDK = project.hasProperty("releaseMajorBuildNumber") ? releaseMajorBuildNumber : 0
    VERSION_MINOR_SDK = project.hasProperty("releaseMinorBuildNumber") ? releaseMinorBuildNumber : 0
    VERSION_MICRO_SDK = project.hasProperty("releaseMicroBuildNumber") ? releaseMicroBuildNumber : 0
    VERSION_EXTENSION_SDK = SNAPSHOT ? "-SNAPSHOT" : ""
    VERSION_MICRO_SDK = SNAPSHOT ? "$BUILD_NUMBER" : VERSION_MICRO_BUILD_NUMBER
    VERSION_SDK = "$VERSION_MAJOR_SDK.$VERSION_MINOR_SDK.$VERSION_MICRO_SDK$VERSION_EXTENSION_SDK"

    SONATYPE_PASSWORD = project.hasProperty("sonatypePassword") ? sonatypePassword : ""
    SONATYPE_USER = project.hasProperty("sonatypeUsername") ? sonatypeUsername : ""

}


group = 'com.ibm.android'
version = VERSION_SDK

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
}

repositories {
    mavenCentral()
}


task javadoc(type: Javadoc) {
    failOnError false
    excludes = ['**/*.kt']
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile

    afterEvaluate {
        // Wait after evaluation to add the android classpath
        // to avoid "buildToolsVersion is not specified" error
        classpath += files(android.getBootClasspath())
    }
}

build.finalizedBy(javadoc)

//Creating sources with comments
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}


//artifacts {
//    archives androidSourcesJar
//}
//
//signing {
//    sign configurations.archives
//}

buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion '30.0.2'

    configurations {
        javadocDeps
    }


    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled false
        }
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }
    sourceSets {
        androidTest {
            java.srcDir project(':airlock-sdk-common').file("src/main/com/github/**")
            java.srcDir project(':airlock-sdk-common').file("src/main/com/ibm/airlock/common/test/**")
            assets.srcDirs project(':airlock-sdk-common').file("src/main/java/com/ibm/airlock/common/test/data")
        }
        test {
            java.srcDir project(':airlock-sdk-common').file("src/test/java")
        }
    }

}


task copyResDirectoryToClasses(type: Copy) {
    from "${projectDir}/src/main/res/raw"
    into "${buildDir}/intermediates/classes/test/debug/res/raw"
}


dependencies {
    implementation project(path: ':airlock-sdk-common')
    releaseApi fileTree(dir: '../airlock-sdk-common/build/libs/release', include: ['*.jar'])
    releaseApi fileTree(include: ['*.jar'], dir: 'libs')
    debugApi fileTree(include: ['*.jar'], dir: '../airlock-sdk-common/libs/')
    debugApi fileTree(dir: '../airlock-sdk-common/build/libs/release', include: ['*.jar'])
    androidTestImplementation project(path: ':airlock-sdk-common')
    compileOnly 'androidx.appcompat:appcompat:1.3.0'
    compileOnly 'org.jetbrains:annotations:13.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.3.0'
    compileOnly 'org.codehaus.sonar-plugins:sonar-ant-task:2.2'
    compileOnly 'com.google.android:annotations:4.1.1.4'
    compileOnly 'com.squareup.okhttp3:okhttp:3.9.1'
    compileOnly 'com.squareup.okhttp3:okhttp-urlconnection:3.9.1'
    compileOnly 'com.google.guava:guava:30.0-android'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'org.mockito:mockito-core:1.9.5'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile files('../sdkSample/lib/qa_utils.jar')
    androidTestImplementation 'com.google.android:annotations:4.1.1.4'
    javadocDeps 'androidx.appcompat:appcompat:1.3.0'
    javadocDeps 'com.squareup.okhttp3:okhttp:3.9.1'
    javadocDeps 'com.squareup.okhttp:okhttp-urlconnection:3.9.1'
//    javadocDeps 'com.google.code.findbugs:annotations:3.0.1'
    javadocDeps 'com.github.spotbugs:spotbugs-annotations:4.3.0'
    javadocDeps group: 'org.mozilla', name: 'rhino', version: '1.7.7.1'
    javadocDeps group: 'org.jetbrains', name: 'annotations', version: '20.1.0'
    testImplementation files('../sdkSample/lib/qa_utils.jar')
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.json:json:20171018'
    testImplementation 'com.google.android:annotations:4.1.1.4'
    testImplementation 'org.testng:testng:6.13.1'
    testImplementation 'com.squareup.okhttp3:okhttp:3.9.1'
    testImplementation 'com.squareup.okhttp3:okhttp-urlconnection:3.9.1'
    androidTestImplementation 'com.squareup.okhttp3:okhttp:3.9.1'
    androidTestImplementation 'com.squareup.okhttp3:okhttp-urlconnection:3.9.1'
    testImplementation 'org.mockito:mockito-core:1.9.5'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    testImplementation 'junit:junit:4.12','com.github.peterwippermann.junit4:parameterized-suite:1.1.0'
    implementation project(':airlytics')
//    implementation 'com.weather.android:airlytics:1.0.53'
    androidTestImplementation 'androidx.test:core:1.4.0'
    implementation group: 'com.sangupta', name: 'murmur', version: '1.0.0'
}


gradle.taskGraph.whenReady {
    gradle.taskGraph.allTasks.each {
        if (it.project == 'sdkSample') {
            it.onlyIf { false }
        }
    }
}


//ignore all test failures - is done temporary, the final solution is test categorization
project.gradle.taskGraph.whenReady {
    ->
    project.tasks.findAll {
        it.name =~ /connected.+AndroidTest/ ||
                it.name == "testDebugUnitTest" ||
                it.name == "testReleaseUnitTest"
    }.each {
        it.ignoreFailures = true
    }
}


afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                pom {
                    name = "Airlock SDK for Android"
                    packaging = 'aar'
                    description = 'The Airlock SDK determines which features are enabled for a particular application based on the user profile and device context (locale, location, device type, etc.).'
                    artifactId = "airlock-sdk-android"
                    url = 'https://github.com/IBM/airlock-sdk-android.git'
                    scm {
                        url =  'scm:git@github.com:IBM/airlock-sdk-android.git'
                        connection = 'scm:git@github.com:IBM/airlock-sdk-android.git'
                        developerConnection = 'scm:git@github.com:IBM/airlock-sdk-android.git'
                    }
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'denusdv'
                            name = 'Denis Voloshin'
                        }
                    }
                }
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug
                pom {
                    name = "Airlock SDK for Android"
                    packaging = 'aar'
                    description = 'The Airlock SDK determines which features are enabled for a particular application based on the user profile and device context (locale, location, device type, etc.).'
                    artifactId = "airlock-sdk-android"
                    url = 'https://github.com/IBM/airlock-sdk-android.git'
                    scm {
                        url =  'scm:git@github.com:IBM/airlock-sdk-android.git'
                        connection = 'scm:git@github.com:IBM/airlock-sdk-android.git'
                        developerConnection = 'scm:git@github.com:IBM/airlock-sdk-android.git'
                    }
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'denusdv'
                            name = 'Denis Voloshin'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = 'repo'
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = SNAPSHOT ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username SONATYPE_USER
                    password SONATYPE_PASSWORD
                }
            }
        }
    }
}


//uploadArchives {
//    repositories {
//        mavenDeployer {
////            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: SONATYPE_USER, password: SONATYPE_PASSWORD)
//            }
//
//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: SONATYPE_USER, password: SONATYPE_PASSWORD)
//            }
//            pom.project {
//                name "Airlock SDK for Android"
//                packaging 'aar'
//                description 'The Airlock SDK determines which features are enabled for a particular application based on the user profile and device context (locale, location, device type, etc.).'
//                artifactId "airlock-sdk-android"
//                url 'https://github.com/IBM/airlock-sdk-android.git'
//                scm {
//                    url 'scm:git@github.com:IBM/airlock-sdk-android.git'
//                    connection 'scm:git@github.com:IBM/airlock-sdk-android.git'
//                    developerConnection 'scm:git@github.com:IBM/airlock-sdk-android.git'
//                }
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        distribution 'repo'
//                    }
//                }
//                developers {
//                    developer {
//                        id 'denusdv'
//                        name 'Denis Voloshin'
//                    }
//                }
//            }
//        }
//    }
//}