apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
//apply from: '../referencefiles/gradlecommon/quality.gradle'


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/Lambda$*.class', '**/Lambda.class', '**/*Lambda.class', '**/*Lambda*.class', '**/*Lambda*.*', '**/*Builder.*', '**/*_MembersInjector.class', '**/*_MembersInjector.*', '**/*_*Factory*.*', '**/*Component*.*', '**/*Module*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc, "${project.projectDir}/../airlock-sdk-common/src/main/java"])
    classDirectories.from = files([debugTree, "${project.projectDir}/../airlock-sdk-common/build/classes/main"])
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "**/*.exec",
            "**/*.ec"
    ])
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
}

buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.2'
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


android {
    compileSdkVersion 29
    buildToolsVersion '30.0.2'

    configurations {
        javadocDeps
    }


    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            testCoverageEnabled false
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
        unitTests.returnDefaultValues = true

    }

    lintOptions {
        abortOnError false
    }
    sourceSets {
        androidTest {
            java.srcDir project(':airlock-sdk-common').file("src/main/com/github/**")
            java.srcDir project(':airlock-sdk-common').file("src/main/com/ibm/airlock/common/test/**")
            assets.srcDirs project(':airlock-sdk-common').file("src/main/java/com/ibm/airlock/common/test/data")
        }
        test {
            //java.srcDir project(':airlock-sdk-common').file("src/test/java")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

task copyResDirectoryToClasses(type: Copy) {
    from "${projectDir}/src/main/res/raw"
    into "${buildDir}/intermediates/classes/test/debug/res/raw"
}

//assembleDebug.dependsOn(copyResDirectoryToClasses)

dependencies {
    implementation project(path: ':airlock-sdk-common')
    releaseApi fileTree(dir: '../airlock-sdk-common/build/libs/release', include: ['*.jar'])
    releaseApi fileTree(include: ['*.jar'], dir: 'libs')
    debugApi fileTree(include: ['*.jar'], dir: '../airlock-sdk-common/libs/')
    debugApi fileTree(dir: '../airlock-sdk-common/build/libs/release', include: ['*.jar'])
    androidTestImplementation project(path: ':airlock-sdk-common')
    compileOnly 'androidx.appcompat:appcompat:1.3.0'
    compileOnly 'org.jetbrains:annotations:13.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.3.0'
    compileOnly 'org.codehaus.sonar-plugins:sonar-ant-task:2.2'
    compileOnly 'org.jetbrains:annotations:13.0'
    compileOnly 'com.google.android:annotations:4.1.1.4'
    compileOnly 'com.squareup.okhttp3:okhttp:3.9.1'
    compileOnly 'com.squareup.okhttp3:okhttp-urlconnection:3.9.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'org.mockito:mockito-core:1.9.5'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation files('../sdkSample/lib/qa_utils.jar')
    androidTestImplementation 'com.google.android:annotations:4.1.1.4'
    javadocDeps 'androidx.appcompat:appcompat:1.3.0'
    javadocDeps 'com.squareup.okhttp3:okhttp:3.9.1'
    javadocDeps 'com.squareup.okhttp:okhttp-urlconnection:3.9.1'
//    javadocDeps 'com.google.code.findbugs:annotations:3.0.1'
    javadocDeps 'com.github.spotbugs:spotbugs-annotations:4.3.0'
    javadocDeps group: 'org.mozilla', name: 'rhino', version: '1.7.7.1'
    javadocDeps group: 'org.jetbrains', name: 'annotations', version: '20.1.0'
    testImplementation files('../sdkSample/lib/qa_utils.jar')
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.json:json:20171018'
    testImplementation 'com.google.android:annotations:4.1.1.4'
    testImplementation 'org.testng:testng:6.13.1'
    testImplementation 'com.squareup.okhttp3:okhttp:3.9.1'
    testImplementation 'com.squareup.okhttp3:okhttp-urlconnection:3.9.1'
    androidTestImplementation 'com.squareup.okhttp3:okhttp:3.9.1'
    androidTestImplementation 'com.squareup.okhttp3:okhttp-urlconnection:3.9.1'
    testImplementation 'org.mockito:mockito-core:1.9.5'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    testImplementation 'junit:junit:4.12','com.github.peterwippermann.junit4:parameterized-suite:1.1.0'
    implementation 'com.weather.android:airlytics:1.0.53'
    androidTestImplementation 'androidx.test:core:1.4.0'
    implementation group: 'com.sangupta', name: 'murmur', version: '1.0.0'
    compileOnly 'com.google.guava:guava:30.0-android'
}


gradle.taskGraph.whenReady {
    gradle.taskGraph.allTasks.each {
        if (it.project == 'sdkSample') {
            it.onlyIf { false }
        }
    }
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
    println android.getBootClasspath()
    destinationDir = file("$buildDir/javadoc/")
    failOnError false
}

//ignore all test failures - is done temporary, the final solution is test categorization
project.gradle.taskGraph.whenReady {
    ->
    project.tasks.findAll {
        it.name =~ /connected.+AndroidTest/ ||
                it.name == "testDebugUnitTest" ||
                it.name == "testReleaseUnitTest"
    }.each {
        it.ignoreFailures = true
    }
}
repositories {
    mavenCentral()
}
